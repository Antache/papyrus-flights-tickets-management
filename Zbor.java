// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package tema1_class_diagram;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;

/************************************************************/
/**
 * 
 */
public class Zbor {
	/**
	 * 
	 */
	protected int id;
	/**
	 * 
	 */
	protected String avion;
	/**
	 * 
	 */
	protected String locatieDecolare;
	/**
	 * 
	 */
	protected String locatieDestinatie;
	/**
	 * 
	 */
	protected Calendar timestampDecolare;
	/**
	 * 
	 */
	protected Calendar timestampAterizareDestinatie;
	/**
	 * 
	 */
	protected boolean[] locuri;
	/**
	 * 
	 */
	/**
	 * 
	 */
	public Bilet[] bilet;
	//static final int NR_MAX_LOCURI = 100;
	protected int nrMaxLocuri;
	
	public Zbor(int id, String avion, String locatieDecolare, String locatieDestinatie, Calendar timestampDecolare,
			Calendar timestampAterizareDestinatie, int nrMaxLocuri) {
		super();
		this.id = id;
		this.avion = avion;
		this.locatieDecolare = locatieDecolare;
		this.locatieDestinatie = locatieDestinatie;
		

//		SimpleDateFormat sdf = new SimpleDateFormat("yyyy MMM dd HH:mm");
//		//tokenize TO DO ?
//		Calendar calendar = new GregorianCalendar(2013,0,31, 21, 26); // lunile sunt de la 0 la 11 wtf
		
		this.timestampDecolare = timestampDecolare; 						//le facem de tip calendar? :3
		this.timestampAterizareDestinatie = timestampAterizareDestinatie;   //
		
		
		
		this.nrMaxLocuri = nrMaxLocuri;
		this.locuri = new boolean[this.nrMaxLocuri];
		
		//this.bilet = bilet; un zbor poate avea 1 sau mai multe bilete. Trebuie alocat spatiu de bilete si eventual primul bilet?
	}

	/**
	 * 
	 */
	public void afisareDetalii() {
		int val, i;
		System.out.print("   ");
		for(i = 0; i < this.nrMaxLocuri; i++ ) {
			val = (locuri[i]) ? 1 : 0;
			System.out.print(val + " ");
			if ((i + 1) % 6 == 0) //rand
				System.out.print("\n");
			if ((i + 1) % 3 == 0) //coridor
				System.out.print("   ");
		}
	}

	/**
	 * 
	 * @param minute 
	 */
	public void intarziere(int minute) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy MMM dd HH:mm");
		this.timestampDecolare.add(Calendar.MINUTE, minute);
		this.timestampAterizareDestinatie.add(Calendar.MINUTE, minute);
		System.out.println(sdf.format(this.timestampDecolare.getTime()));
		System.out.println(sdf.format(this.timestampAterizareDestinatie.getTime()));
	}

	/**
	 * 
	 * @param motiv 
	 */
	public void anulare(String motiv) {
		//TODO edit motiv
		for(int i=0;i<this.bilet.length;i++) {
			this.bilet[i].stergere();
			this.bilet[i] = null;
		}
	}

	/**
	 * 
	 * @param idPasager 
	 */
	public void adaugaPasager(String idPasager) {
		
	}

	/**
	 * 
	 */
	public boolean verificaLocLiber(int nr) {
		if(this.locuri[nr] == false)
			return true;
		return false;
	}
}
